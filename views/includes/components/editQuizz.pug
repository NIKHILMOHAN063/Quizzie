container(classname='edit-quiz-page')
  typography(variant='h3' classname='dash-head p-top edit-quiz-head')
    | Edit Quiz
  div(classname='edit-btn-bar')
    button(classname='edit-details-btn' component='{Link}' to='{`/updateQuizDetails/${quizId}`}')
      create(classname='edit-icon')
        | Edit Details
    button(classname='edit-details-btn delete-btn' onclick='{handleDeleteBtn}')
      delete(classname='edit-icon')
        | Delete Quiz
    | 					{quizDetails.quizStatus === 1 ? (
    button(classname='edit-details-btn' style='{{' marginleft:='' "3%"='' }}='' onclick='{()' =='')
      | setCloseQuizModal(true)}
      | >
      replay(classname='edit-quiz')
        | Close Quiz
    | 					) : quizDetails.quizStatus === 2 ? (
    button(classname='edit-details-btn' style='{{' marginleft:='' "3%"='' }}='' onclick='{()' =='')
      | setQuizRestartModal(true)}
      | >
      replay(classname='edit-quiz')
        | Restart Quiz
    | 					) : null}
  div(classname='quiz-details-sec')
    typography(variant='h6' classname='quiz-detail-param')
      | Name:{" "}
      span(classname='quiz-detail-text')
        | {quizDetails.quizName}
    typography(variant='h6' classname='quiz-detail-param')
      | Date:{" "}
      span(classname='quiz-detail-text')
        | {new Date(
        | Number(quizDetails.scheduledFor)
        | ).toDateString()}
    typography(variant='h6' classname='quiz-detail-param')
      | Time:{" "}
      span(classname='quiz-detail-text')
        | {new Date(
        | Number(quizDetails.scheduledFor)
        | ).toLocaleTimeString()}
    typography(variant='h6' classname='quiz-detail-param')
      | Duration:{" "}
      span(classname='quiz-detail-text')
        | {quizDetails.quizDuration} minutes
    typography(variant='h6' classname='quiz-detail-param')
      | Type:{" "}
      span(classname='quiz-detail-text')
        | {quizDetails.quizType}
    | 					{quizDetails.quizType === "private" ? (
    typography(variant='h6' classname='quiz-detail-param')
      | Quiz Code:{" "}
      span(classname='quiz-detail-text')
        | {quizDetails.quizCode}
    | 					) : null}
  div(classname='quiz-questions-sec')
    typography(variant='h4' classname='quiz-questions-head')
      | Questions
    div(classname='quiz-questions-display')
      div(classname='add-question-bar')
        button(classname='add-question-btn' onclick='{()' =='')
          | setQuestionModal(true)}
          | >
          | Add a question
      | 						{quizQuestions.length === 0 ? (
      p(style='{{' textalign:='' "center"='' }}='')
        | No questions added yet!
      | 						) : (
      div(classname='questions-list-display')
        | {quizQuestions.map((question) => (
        expansionpanel(elevation='{3}' classname='expansion' key='{question._id}')
          expansionpanelsummary(classname='question-summary' expandicon='{<ExpandMore')
            | }
            | aria-controls="question-content"
            | aria-label="Expand"
            | >
            formcontrollabel(style='{{' marginright:='' "0"='' }}='' aria-label='Edit' control='{' <iconbutton='')
              create
                | }
                | // label={question.description}
                | onClick={() =>
                | handleQuestionEditBtn(
                | question
                | )
                | }
                | />
                formcontrollabel(aria-label='Edit' control='{' <iconbutton='')
                  delete
                    | }
                    | // label={question.description}
                    | onClick={() =>
                    | handleQuestionDeleteBtn(
                    | question
                    | )
                    | }
                    | />
                    typography(classname='question-label')
                      | {question.description}
          expansionpaneldetails
            list(component='nav' classname='options-display')
              | {question.options.map(
              | (option) => (
              listitem(button='' key='{option._id}')
                listitemicon
                  adjust(style='{{' color:='' question.correctanswer='==' option.text='' ?='' "green"='' :='' "black",='' }}='')
                listitemtext(style='{{' color:='' question.correctanswer='==' option.text='' ?='' "green"='' :='' "black",='' }}='' primary='{' }='')
              | 													)
              | 												)}
        | 								))}
      | 						)}
    typography(variant='h4' classname='quiz-questions-head m-top')
      | Submissions
    div(classname='quiz-students-list')
      div(classname='add-question-bar')
        button(classname='add-question-btn stats-btn' component='{' responses.length='' !='=' 0='' ?='' link='' :='' button='' }='' to='{{' pathname:='' "='' quizstats",='' state:='' {='' responses:='' responses='' },='' }}='')
          barchart
            | View Stats
      | 						{responses.length === 0 ? (
      p(style='{{' textalign:='' "center",='' margin:='' "0",='' paddingtop:='' "3%",='' paddingbottom:='' }}='')
        | No responses yet!
      | 						) : (
      | 							<>
      div(classname='search-bar')
        textfield(placeholder='Search by name or score' type='text' onchange='{handleSearchChange}' classname='search-input' value='{searchText}')
          div(style='{{' marginleft:='' "3%"='' }}='')
            inputlabel#sort-by
              | Sort by
            select#sort-select(labelid='sort-by' value='{sortBy}' onchange='{handleSortChange}')
              | None
              | Recent
              | Score
              | Name
      list(aria-label='responses list')
        | {searchData.map((response) => (
        listitem(button='' key='{response._id}' component='{Link}' to='{{' pathname:='' `='' studentresponse`,='' state:='' {='' response:='' response='' },='' }}='')
          listitemtext(primary='{response.userId.name}' secondary='{`Scored:' ${response.marks}`}='')
        | 									))}
      | 						)}
  dialog(open='{questionModal}' onclose='{onCloseHandle}' aria-labelledby='add-question-modal' paperprops='{{' style:='' {='' backgroundcolor:='' "white",='' color:='' "#333",='' minwidth:='' "50%",='' },='' }}='' style='{{' width:='' "100%"='')
    div(classname='add-ques-heading')
      typography(variant='h6' style='{{' textalign:='' "center",='' margin:='' "2%='' 5%"='' }}='')
        | New Question{" "}
      | 						{!update ? (
      iconbutton(onclick='{handlePopover}')
        info(classname='add-info-icon')
      | 						) : null}
      popover#file-upload-popover(open='{popoverOpen}' anchorel='{popoverAnchor}' onclose='{handlePopoverClose}' anchororigin='{{' vertical:='' "bottom",='' horizontal:='' "left",='' }}='' disablerestorefocus='' uselayerforclickaway='{false}' paperprops='{{' style:='' {='' maxwidth:='' "400px"='' }='')
        p(classname='popover-text')
          | You can upload a 
          strong .csv
          |  file with
          | 								questions. The format should be: the{" "}
          strong
            | first column should contain the question
            | text.
          | {" "}
          | 								The next 4 columns must contain the{" "}
          strong four options.
          |  And the sixth
          | 								column should contain{" "}
          strong
            | the correct answer (it should match one of
            | the four options)
          | 								. 
          br
          br
          strong
            | NOTE: THE FILE SHOULD EXACTLY MATCH THE
            | GIVEN FORMAT.
          | {" "}
          | 								You will be able to see and edit all the
          | 								question though.
    | 					{!update ? (
    | 						<>
    div(classname='dropzone')
      dropzone(ondrop='{(acceptedFiles)' =='')
        | handleFileDrop(acceptedFiles)
        | }
        | >
        | {({ getRootProps, getInputProps }) => (
        section
          div({...getrootprops()}='')
            input({...getinputprops()}='')
            addcircle(classname='drop-icon')
              p(style='{{' color:='' "rgb(110,='' 110,='' 110)",='' }}='')
                | Drag 'n' drop or click to
                | select files
        | 									)}
    p(classname='manual-head')
      span Or manually add the question
    | 					) : null}
    div(classname='new-question-form')
      textinput(error='{newQuestionError}' helpertext='{' newquestionerror='' ?='' "this='' cannot='' be='' empty"='' :='' null='' }='' classname='new-ques-input' variant='outlined' label='Question Text' value='{newQuestion}' onchange='{onQuestionChange}')
        hr(style='{{' width:='' "100%",='' marginbottom:='' "3%"='' }}='')
        grid(container='' spacing='{1}')
          grid(item='' xs='{12}' sm='{6}')
            textinput(error='{option1Error}' helpertext='{' option1error='' ?='' "this='' cannot='' be='' empty"='' :='' null='' }='' classname='new-ques-input' variant='outlined' label='Option 1' value='{option1}' onchange='{handleOptionChange1}')
          grid(item='' xs='{12}' sm='{6}')
            textinput(error='{option2Error}' helpertext='{' option2error='' ?='' "this='' cannot='' be='' empty"='' :='' null='' }='' classname='new-ques-input' variant='outlined' label='Option 2' value='{option2}' onchange='{handleOptionChange2}')
        grid(container='' spacing='{1}')
          grid(item='' xs='{12}' sm='{6}')
            textinput(error='{option3Error}' helpertext='{' option3error='' ?='' "this='' cannot='' be='' empty"='' :='' null='' }='' classname='new-ques-input' variant='outlined' label='Option 3' value='{option3}' onchange='{handleOptionChange3}')
          grid(item='' xs='{12}' sm='{6}')
            textinput(error='{option4Error}' helpertext='{' option4error='' ?='' "this='' cannot='' be='' empty"='' :='' null='' }='' classname='new-ques-input' variant='outlined' label='Option 4' value='{option4}' onchange='{handleOptionChange4}')
        hr(style='{{' width:='' "100%",='' marginbottom:='' "3%"='' }}='')
        inputlabel#correct-option
          | Correct Option
        select(error='{correctOptionError}' classname='correct-answer-select' style='{{' width:='' "50%"='' }}='' labelid='correct-option' value='{correctOption}' onchange='{handleCorrectOption}')
          | None
          | {option1.trim().length !== 0 ? (
          | {option1}
          | ) : null}
          | {option2.trim().length !== 0 ? (
          | {option2}
          | ) : null}
          | {option3.trim().length !== 0 ? (
          | {option3}
          | ) : null}
          | {option4.trim().length !== 0 ? (
          | {option4}
          | ) : null}
        | 						{!update ? (
        button(classname='add-question-submit' onclick='{handleQuestionSubmit}')
          | Add Question
        | 						) : (
        button(classname='add-question-submit' onclick='{handleQuestionUpdate}')
          | Update Question
        | 						)}
  dialog(open='{deleteModal}' onclose='{()' =='')
    | setDeleteModal(false)}
    | aria-labelledby="delete-quiz-modal"
    | PaperProps={{
    | style: {
    | backgroundColor: "white",
    | color: "black",
    | minWidth: "10%",
    | },
    | }}
    | >
    dialogtitle
      | Are you sure you want to delete this quiz?
    div(classname='btn-div')
      button(classname='logout-btn m-right bg-red-btn' onclick='{handleDelete}')
        | Yes
      button(classname='cancel-btn m-left' onclick='{()' =='')
        | setDeleteModal(false)}
        | >
        | No
  dialog(open='{deleteQuestionModal}' onclose='{handleQuestionModalClose}' aria-labelledby='delete-quiz-modal' paperprops='{{' style:='' {='' backgroundcolor:='' "white",='' color:='' "black",='' minwidth:='' "10%",='' },='' }}='')
    dialogtitle
      | Are you sure you want to delete this question?
    div(classname='btn-div')
      button(classname='logout-btn m-right bg-red-btn' onclick='{handleDeleteQuestion}')
        | Yes
      button(classname='cancel-btn m-left' onclick='{handleQuestionModalClose}')
        | No
  dialog(open='{quizRestartModal}' onclose='{()' =='')
    | setQuizRestartModal(false)}
    | aria-labelledby="restart-quiz-modal"
    | PaperProps={{
    | style: {
    | backgroundColor: "white",
    | color: "black",
    | minWidth: "10%",
    | },
    | }}
    | >
    dialogtitle
      | Are you sure you want to restart this quiz?
    div(classname='btn-div')
      button(classname='logout-btn m-right bg-green-btn' onclick='{handleRestart}')
        | Yes
      button(classname='cancel-btn m-left bg-red-btn' onclick='{()' =='')
        | setQuizRestartModal(false)}
        | >
        | No
  dialog(open='{closeQuizModal}' onclose='{()' =='')
    | setCloseQuizModal(false)}
    | aria-labelledby="restart-quiz-modal"
    | PaperProps={{
    | style: {
    | backgroundColor: "white",
    | color: "black",
    | minWidth: "10%",
    | },
    | }}
    | >
    dialogtitle
      | Are you sure you want to close this quiz?
    div(classname='btn-div')
      button(classname='logout-btn m-right bg-green-btn' onclick='{handleQuizClose}')
        | Yes
      button(classname='cancel-btn m-left bg-red-btn' onclick='{()' =='')
        | setCloseQuizModal(false)}
        | >
        | No
  snackbar(open='{fileError}' autohideduration='{3000}' onclose='{()' =='')
    | setFileError(false)}
    | anchorOrigin={{ vertical: "bottom", horizontal: "left" }}
    | >
    alert(variant='filled' severity='error' onclose='{()' =='')
      | setFileError(false)}
      | >
      | There was some problem with the file. Try again...
  snackbar(open='{serverError}' autohideduration='{3000}' onclose='{()' =='')
    | setServerError(false)}
    | anchorOrigin={{ vertical: "bottom", horizontal: "left" }}
    | >
    alert(variant='filled' severity='error' onclose='{()' =='')
      | setServerError(false)}
      | >
      | There was some problem with the server. Try again...
